;; data structure
(define (hold-env sym env) (cons '*hold-env* (cons sym env)))
(define (symbol-hold-env? expr) (and (pair? expr) (eq? (car expr) '*hold-env*)))

(define (constant? expr)
  (or (boolean? expr) (number? expr) (char? expr) (string? expr)))

(define (obj-symbol expr) expr)

(define (obj-vector vct) vct)
(define (obj-pair obj-car obj-cdr) (cons 'pair (cons obj-car obj-cdr)))

(define (obj-constant? obj) (constant? obj))
(define (obj-boolean? obj) (boolean? obj))
(define (obj-number? obj) (number? obj))
(define (obj-char? obj) (char? obj))
(define (obj-string? obj) (string? obj))
(define (obj-symbol? obj) (symbol? obj))
(define (obj-vector? obj) (vector? obj))
(define (obj-pair? obj) (and (pair? obj) (eq? (car obj) 'pair)))

(define (quote-expr expr)
  (cond ((constant? expr) expr)
        ((symbol? expr) (obj-symbol expr))
        ((vector? expr)
         (obj-vector (list->vector (map quote-expr (vector->list expr)))))
        ((pair? expr)
         (obj-pair (quote-expr (car expr)) (quote-expr (cdr expr))))
        ((null? expr)
         (obj-nil))))

(define (raw-obj obj)
  (cond ((obj-constant? obj) obj)
        ((obj-symbol? obj) obj)
        ((obj-vector? obj) obj)
        ((obj-pair? obj) (cdr obj))))

(define (obj-proc-lambda env body) (cons 'proc (cons 'lambda (cons env body))))
(define (obj-proc-continuation stack) (cons 'proc (cons 'continuation stack)))
(define (obj-proc-builtin meta-func) (cons 'proc (cons 'builtin meta-func)))
(define (obj-macro env rules) (cons 'macro (cons env rules)))
(define (obj-error stack msg) (cons 'error (cons stack msg)))
(define (obj-undefined) (cons 'undefined '()))
(define (obj-nil) (cons 'nil '()))

(define (obj-proc? obj) (and (pair? obj) (eq? (car obj) 'proc)))
(define (obj-macro? obj) (and (pair? obj) (eq? (car obj) 'macro)))
(define (obj-error? obj) (and (pair? obj) (eq? (car obj) 'error)))
(define (obj-undefined? obj) (and (pair? obj) (eq? (car obj) 'undefined)))
(define (obj-nil? obj) (and (pair? obj) (eq? (car obj) 'nil)))

(define (proc-lambda? proc) (eq? (car proc) 'lambda))
(define (proc-builtin? proc) (eq? (car proc) 'builtin))
(define (proc-continuation? proc) (eq? (car proc) 'continuation))


(define (stack-frame-func args) (cons 'func args))
(define (stack-frame-arg func args-evaled-reversed args-not-evaled)
  (cons 'arg (cons func (cons args-evaled-reversed args-not-evaled))))
(define (stack-frame-multi-func args) (cons 'multi-func args))
(define (stack-frame-multi-arg func) (cons 'multi-arg func))
(define (stack-frame-body env body) (cons 'body (cons env body)))
(define (stack-frame-define sym) (cons 'define sym))

(define (stack-frame-func? frame) (eq? (car frame) 'func))
(define (stack-frame-arg? frame) (eq? (car frame) 'arg))
(define (stack-frame-multi-func? frame) (eq? (car frame) 'multi-func))
(define (stack-frame-multi-arg? frame) (eq? (car frame) 'multi-arg))
(define (stack-frame-body? frame) (eq? (car frame) 'body))
(define (stack-frame-define? frame) (eq? (car frame) 'define))

(define (empty-stack? stack) (null? (car stack)))
(define (make-empty-stack env) (cons '() (list env)))
(define (head-stack stack) (caar stack))
(define (tail-stack stack)
  (cons (cdar stack)
        (if (stack-frame-body? (caar stack))
          (cddr stack)
          (cdr stack))))
(define (env-stack stack) (cadr stack))
(define (cons-stack frame stack)
  (cons (cons frame (car stack))
        (if (stack-frame-body? frame)
          (cons (cadr frame) (cdr stack))
          (cdr stack))))
(define (stash-stack stack)
  (cons '()
        (let loop ((envs (cdr stack)))
          (if (null? (cdr envs)) (car envs) (loop (cdr envs))))))


(define (make-empty-dict) '())
(define (update-dict dict var val) (cons (cons var val) dict))
(define (lookup-dict dict var)
  (cond ((assq var dict) => cdr)
        (else #f)))
(define (lookup-pair-dict dict var) (assq var dict))
(define (merge-dict dict1 dict2) (append dict2 dict1))
(define (product-same-key-dicts . dicts)
  (map (lambda pairs (caar pairs (map cdr pairs))) . dicts))
(define (keys-dict dict) (map car dict))

(define make-empty-env-frame make-empty-dict)
(define update-env-frame update-dict)
(define lookup-env-frame lookup-dict)
(define merge-env-frame merge-dict)
(define keys-frame keys-dict)

(define (make-empty-env)
  (list (make-empty-env-frame)))
(define (extend-env env)
  (cons (make-empty-env-frame) env))
(define (define-var! env var val)
  (set-car! env (update-env-frame (car env) var val)))
(define (lookup-env env var)
  (if (null? env)
    #f
    (or
      (lookup-env-frame (car env) var)
      (lookup-env (cdr env) var))))
